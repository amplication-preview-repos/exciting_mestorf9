/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePacienteArgs } from "./CreatePacienteArgs";
import { UpdatePacienteArgs } from "./UpdatePacienteArgs";
import { DeletePacienteArgs } from "./DeletePacienteArgs";
import { PacienteCountArgs } from "./PacienteCountArgs";
import { PacienteFindManyArgs } from "./PacienteFindManyArgs";
import { PacienteFindUniqueArgs } from "./PacienteFindUniqueArgs";
import { Paciente } from "./Paciente";
import { PacienteService } from "../paciente.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Paciente)
export class PacienteResolverBase {
  constructor(
    protected readonly service: PacienteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "any",
  })
  async _pacientesMeta(
    @graphql.Args() args: PacienteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Paciente])
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "any",
  })
  async pacientes(
    @graphql.Args() args: PacienteFindManyArgs
  ): Promise<Paciente[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Paciente, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "read",
    possession: "own",
  })
  async paciente(
    @graphql.Args() args: PacienteFindUniqueArgs
  ): Promise<Paciente | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paciente)
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "create",
    possession: "any",
  })
  async createPaciente(
    @graphql.Args() args: CreatePacienteArgs
  ): Promise<Paciente> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Paciente)
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "update",
    possession: "any",
  })
  async updatePaciente(
    @graphql.Args() args: UpdatePacienteArgs
  ): Promise<Paciente | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Paciente)
  @nestAccessControl.UseRoles({
    resource: "Paciente",
    action: "delete",
    possession: "any",
  })
  async deletePaciente(
    @graphql.Args() args: DeletePacienteArgs
  ): Promise<Paciente | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
